@startuml
' Define styles for the containers
skinparam component {
    BackgroundColor<<customer>> LightBlue
    BorderColor<<customer>> Blue
    BackgroundColor<<vehicle>> LightGreen
    BorderColor<<vehicle>> Green
}

' Customer Container
package "Customer Components" <<customer>> {
    ' CustomerAccountController
    class "<<controller>>\nCustomerAccountController" as controller {
        + getAllCustomerAccounts() : List<CustomerAccountResponseModel>
        + getCustomerAccountById(customerId: String) : CustomerAccountResponseModel
        + updateCustomerById(customerId: String, customerAccountRequestModel: CustomerAccountRequestModel) : CustomerAccountResponseModel
        + deleteCustomerById(customerId: String) : void
    }

    ' CustomerAccountService interface
    interface "<<service>>\nCustomerAccountService" as service {
        + getAllCustomerAccounts() : List<CustomerAccountResponseModel>
        + getCustomerAccountById(customerId: String) : CustomerAccountResponseModel
        + updateCustomerById(customerId: String, customerAccountRequestModel: CustomerAccountRequestModel) : CustomerAccountResponseModel
        + deleteCustomerById(customerId: String) : void
    }

    ' CustomerAccountServiceImpl class
    class "<<service>>\nCustomerAccountServiceImpl" as serviceImpl {
        - customerAccountRepository : CustomerAccountRepository
        - vehicleService : VehicleService
        - customerAccountResponseMapper : CustomerAccountResponseMapper
        - customerAccountRequestMapper : CustomerAccountRequestMapper
        + getAllCustomerAccounts() : List<CustomerAccountResponseModel>
        + getCustomerAccountById(customerId: String) : CustomerAccountResponseModel
        + updateCustomerById(customerId: String, customerAccountRequestModel: CustomerAccountRequestModel) : CustomerAccountResponseModel
        + deleteCustomerById(customerId: String) : void
    }

    ' CustomerAccountRepository interface (assuming existence)
    interface "<<repository>>\nCustomerAccountRepository" as repository {
        + findAll() : List<CustomerAccount>
        + findCustomerAccountByCustomerAccountIdentifier_CustomerId(customerId: String) : CustomerAccount
        + delete(customerAccount: CustomerAccount) : void
    }

    ' CustomerAccountResponseMapper class (assuming existence)
    class "<<mapper>>\nCustomerAccountResponseMapper" as responseMapper {
        + entityToResponseModel(entity: CustomerAccount) : CustomerAccountResponseModel
        + entityToResponseModelList(entities: List<CustomerAccount>) : List<CustomerAccountResponseModel>
    }

    ' CustomerAccountRequestMapper class (assuming existence)
    class "<<mapper>>\nCustomerAccountRequestMapper" as requestMapper {
        + requestModelToEntity(customerAccountRequestModel: CustomerAccountRequestModel) : CustomerAccount
    }

    ' CustomerAccount class
    class "<<entity>>\nCustomerAccount" as customerAccount {
        - id : Integer
        - customerAccountIdentifier : CustomerAccountIdentifier
        - customerFirstName : String
        - customerLastName : String
        - customerEmail : String
        - customerPhoneNumber : String
        - customerPassword : String
    }

    ' CustomerAccountIdentifier class
    class "<<entity>>\nCustomerAccountIdentifier" as accountIdentifier {
        - customerAccountId : String
        + getCustomerAccountId() : String
    }
}

' Vehicle Container
package "Vehicle Components" <<vehicle>> {
    ' VehicleController
    class "<<controller>>\nVehicleController" as vehicleController {
        - VehicleService : vehicleService
        + getAllVehiclesForCustomer(@PathVariable String customerId) : ResponseEntity<List<VehicleResponseModel>>
    }

    ' VehicleService interface
    interface "VehicleService" as vehicleService {
        + getAllVehiclesForCustomer() : List<VehicleResponseModel>
    }

    ' VehicleServiceImpl class
    class "<<service>>\nVehicleServiceImpl" as vehicleServiceImpl {
        - vehicleRepository : VehicleRepository
        - vehicleResponseMapper : VehicleResponseMapper
        - vehicleRequestMapper : VehicleRequestMapper
        - customerAccountRepository: CustomerAccountRepository
        + getAllVehiclesForCustomer() : List<VehicleResponseModel>
    }

    ' VehicleRepository interface (assuming existence)
    interface "<<repository>>\nVehicleRepository" as vehicleRepository {
        + findAllByCustomerId() : List<Vehicle>
    }

    ' VehicleResponseMapper class (assuming existence)
    class "<<mapper>>\nVehicleResponseMapper" as vehicleResponseMapper {
        + entityToResponseModelList(entities : List<Vehicle> vehicles) : List<VehicleResponseModel>
    }

    ' Vehicle class
    class "<<entity>>\nVehicle" as vehicle {
        - id : Integer
        - vehicleIdentifier : VehicleIdentifier
        - customerId : String
        - make : String
        - model : String
        - year : String
        - transmission_type : TransmissionType
        - mileage : String
    }

    ' VehicleIdentifier class
    class "VehicleIdentifier" as vehicleIdentifier {
        - vehicleId : String
        + getVehicleId() : String
    }

    ' TransmissionType enum
    enum "TransmissionType" as transmissionType {
        - MANUAL
        - AUTOMATIC
    }
}

' Relationships within Customer Components
controller .up.|> service : implements
serviceImpl .up.|> service : implements
serviceImpl --> repository : uses
serviceImpl --> responseMapper : uses
serviceImpl --> requestMapper : uses
serviceImpl --> vehicleServiceImpl : uses
customerAccount --> accountIdentifier : contains

' Relationships within Vehicle Components
vehicleController --> vehicleService : uses
vehicleServiceImpl --> vehicleRepository : uses
vehicleServiceImpl --> vehicleResponseMapper : uses
vehicle --> vehicleIdentifier : contains
vehicle --> transmissionType : uses
@enduml
