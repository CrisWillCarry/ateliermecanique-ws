@startuml
' Define styles for the containers
skinparam class {
    BackgroundColor<<entity>> Wheat
    BackgroundColor<<controller>> LightSkyBlue
    BackgroundColor<<service>> LightGreen
    BackgroundColor<<repository>> LightCoral
    BackgroundColor<<mapper>> Khaki
}

' Customer Container
package "Customer Components" <<customer>> {
    ' ... (Existing customer components)
}

' Vehicle Container
package "Vehicle Components" <<vehicle>> {
    ' ... (Existing vehicle components)
}

' Appointment Components
package "Appointment Components" <<appointment>> {
    class "<<controller>>\nAppointmentController" as appointmentController {
        + getAllAppointments() : List<AppointmentResponseModel>
        + getAppointmentById(appointmentId: UUID) : AppointmentResponseModel
        + addAppointment(appointmentRequestModel: AppointmentRequestModel) : AppointmentResponseModel
        + updateAppointmentById(appointmentId: UUID, appointmentRequestModel: AppointmentRequestModel) : AppointmentResponseModel
        + deleteAppointmentById(appointmentId: UUID) : void
    }

    interface "<<service>>\nAppointmentService" as appointmentService {
        + getAllAppointments() : List<AppointmentResponseModel>
        + getAppointmentById(appointmentId: UUID) : AppointmentResponseModel
        + addAppointment(appointmentRequestModel: AppointmentRequestModel) : AppointmentResponseModel
        + updateAppointmentById(appointmentId: UUID, appointmentRequestModel: AppointmentRequestModel) : AppointmentResponseModel
        + deleteAppointmentById(appointmentId: UUID) : void
    }

    class "<<service>>\nAppointmentServiceImpl" as appointmentServiceImpl {
        - appointmentRepository : AppointmentRepository
        - appointmentResponseMapper : AppointmentResponseMapper
        - appointmentRequestMapper : AppointmentRequestMapper
        + getAllAppointments() : List<AppointmentResponseModel>
        + getAppointmentById(appointmentId: UUID) : AppointmentResponseModel
        + addAppointment(appointmentRequestModel: AppointmentRequestModel) : AppointmentResponseModel
        + updateAppointmentById(appointmentId: UUID, appointmentRequestModel: AppointmentRequestModel) : AppointmentResponseModel
        + deleteAppointmentById(appointmentId: UUID) : void
    }

    interface "<<repository>>\nAppointmentRepository" as appointmentRepository {
        + findAll() : List<Appointment>
        + findAppointmentByAppointmentId(appointmentId: UUID) : Appointment
        + save(appointment: Appointment) : Appointment
        + delete(appointment: Appointment) : void
    }

    class "<<mapper>>\nAppointmentResponseMapper" as appointmentResponseMapper {
        + entityToResponseModel(entity: Appointment) : AppointmentResponseModel
        + entityToResponseModelList(entities: List<Appointment>) : List<AppointmentResponseModel>
    }

    class "<<mapper>>\nAppointmentRequestMapper" as appointmentRequestMapper {
        + requestModelToEntity(appointmentRequestModel: AppointmentRequestModel) : Appointment
    }

    class "<<entity>>\nAppointment" as appointment {
        - id : UUID
        - appointmentIdentifier : AppointmentIdentifier
        - appointmentDate : DateTime
        - vehicleIdentifier : VehicleIdentifier
        - clientIdentifier : ClientIdentifier
    }

    class "<<entity>>\nAppointmentIdentifier" as appointmentIdentifier {
        - appointmentId : UUID
        + getAppointmentId() : UUID
    }
}

' Authentication Components
package "Authentication Components" <<authentication>> {
    class "<<controller>>\nAuthController" as authController {
        + login(username: String, password: String) : ResponseEntity<TokenResponse>
        + logout(token: String) : ResponseEntity<String>
    }

    class "<<service>>\nTokenService" as tokenService {
        + generateToken(username: String, password: String) : String
        + validateToken(token: String) : boolean
        + invalidateToken(token: String) : void
    }

    interface "<<repository>>\nUserRepository" as userRepository {
        + findByUsername(username: String) : User
        + save(user: User) : User
        + deleteByUsername(username: String) : void
    }

    class "<<entity>>\nUser" as user {
        - id : Integer
        - username : String
        - password : String
        - roles : List<Role>
    }

    enum "<<entity>>\nRole" as role {
        ADMIN
        CUSTOMER
    }

    class "<<entity>>\nTokenResponse" as tokenResponse {
        - token : String
        - expiration : Date
    }
}

' Relationships within Customer Components
' ... (Existing relationships)

' Relationships within Vehicle Components
' ... (Existing relationships)

' Relationships within Appointment Components
appointmentController .up.|> appointmentService : implements
appointmentServiceImpl .up.|> appointmentService : implements
appointmentServiceImpl --> appointmentRepository : uses
appointmentServiceImpl --> appointmentResponseMapper : uses
appointmentServiceImpl --> appointmentRequestMapper : uses
appointment --> appointmentIdentifier : contains
appointment --> customerAccount : associatedWith

' Relationships within Authentication Components
authController .up.|> tokenService : uses
tokenService --> userRepository : uses
userRepository --> user : retrieves/stores
user .. role : has
user --> customerAccount : associatedWith

@enduml
