@startuml

actor User

participant AuthController as "<<Service>>\nAuthController"
participant UserService as "<<Backend>>\nUserService"
participant Mailer as "<<Service>>\nMailer"
participant Database as "<<Database>>\nDatabase"
participant JwtUtils as "<<Utils>>\nJwtUtils"

User -> AuthController: initiatePasswordReset(email)
activate AuthController

AuthController -> UserService: getUserByEmail(email)
activate UserService

UserService -> Database: Query user by email
activate Database

Database --> UserService: User details
deactivate Database

UserService --> AuthController: User found
deactivate UserService

AuthController -> JwtUtils: generateResetToken(userId, email)
activate JwtUtils

JwtUtils --> AuthController: Token generated
deactivate JwtUtils

AuthController -> UserService: saveResetToken(userId, resetToken)
activate UserService

UserService --> AuthController: Reset token saved
deactivate UserService

AuthController -> Mailer: sendPasswordResetEmail(email, resetToken)
activate Mailer

Mailer --> User: Email sent successfully
deactivate Mailer

User -> AuthController: updatePassword(userId, newPassword)
activate AuthController

AuthController --> UserService: updatePassword(userId, newPassword)
activate UserService

UserService --> AuthController: Password updated successfully
deactivate UserService

AuthController -> JwtUtils: generateToken(userId, user.username)
activate JwtUtils

JwtUtils --> AuthController: Token generated
deactivate JwtUtils

AuthController --> User: sendJWTResponse(token)
deactivate AuthController

@enduml
