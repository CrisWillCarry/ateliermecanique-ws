@startuml

actor User

participant AuthController as "<<Service>>\nAuthController"
participant UserRepository as "<<Backend>>\nUserRepository"
participant Mailer as "<<Service>>\nMailer"
participant Database as "<<Database>>\nDatabase"
participant JwtUtils as "<<Utils>>\nJwtUtils"

User -> AuthController: Accesses forgot password page
activate AuthController

AuthController -> UserRepository: findUserByEmail(email)
activate UserRepository

UserRepository -> Database: Query user by email
activate Database

Database --> UserRepository: User details
deactivate Database

UserRepository --> AuthController: User found
deactivate UserRepository

AuthController -> JwtUtils: generateTokenForOAuth(email)
activate JwtUtils

JwtUtils --> AuthController: Token generated
deactivate JwtUtils

AuthController -> Mailer: sendPasswordResetEmail(email, resetToken)
activate Mailer

Mailer --> AuthController: Email sent successfully
deactivate Mailer

AuthController --> User: Display success message
deactivate AuthController

User -> AuthController: Follows the password reset link in the email
activate AuthController

AuthController -> UserRepository: findUserByEmail(email)
activate UserRepository

UserRepository -> Database: Query user by ID
activate Database

Database --> UserRepository: User details
deactivate Database

UserRepository --> AuthController: User found
deactivate UserRepository

AuthController -> UserRepository: updatePassword and save(user)
activate UserRepository

UserRepository --> AuthController: User Saved with updated password
deactivate UserRepository

AuthController -> User: Display success message
deactivate AuthController

@enduml
