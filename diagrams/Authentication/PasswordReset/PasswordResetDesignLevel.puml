@startuml

actor User

participant ReactApplication as "<<View>>\nReactApplication"
participant ForgotPasswordPage as "<<View>>\nForgotPasswordPage"
participant ResetPasswordPage as "<<View>>\nResetPasswordPage"
participant AuthController as "<<Service>>\nAuthController"
participant UserRepository as "<<Backend>>\nUserRepository"
participant Mailer as "<<Service>>\nMailer"
participant Database as "<<Database>>\nDatabase"
participant JwtUtils as "<<Utils>>\nJwtUtils"

User -> ReactApplication: Accesses forgot password page
activate ReactApplication

ReactApplication -> ForgotPasswordPage: render()
activate ForgotPasswordPage

User -> ForgotPasswordPage: Provides registered email
ForgotPasswordPage -> AuthController: initiatePasswordReset(email)
activate AuthController

AuthController -> UserRepository: findUserByEmail(email)
activate UserRepository

UserRepository -> Database: Query user by email
activate Database

Database --> UserRepository: User details
deactivate Database

UserRepository --> AuthController: User found
deactivate UserRepository

AuthController -> JwtUtils: generateTokenForOAuth(email)
activate JwtUtils

JwtUtils --> AuthController: Token generated
deactivate JwtUtils


AuthController -> Mailer: sendPasswordResetEmail(email, resetToken)
activate Mailer

Mailer --> AuthController: Email sent successfully
deactivate Mailer

AuthController --> ReactApplication: Display success message
deactivate AuthController

ReactApplication --> User: Show confirmation and instructions
deactivate ReactApplication
deactivate ForgotPasswordPage

User -> ReactApplication: Follows the password reset link in the email
activate ReactApplication

ReactApplication -> ResetPasswordPage: render()
activate ResetPasswordPage

User -> ResetPasswordPage: Enters new password
ResetPasswordPage -> AuthController: resetPassword(newPassword)
activate AuthController

AuthController -> UserRepository: findUserByEmail(email)
activate UserRepository

UserRepository -> Database: Query user by ID
activate Database

Database --> UserRepository: User details
deactivate Database

UserRepository --> AuthController: User found
deactivate UserRepository

AuthController -> UserRepository: updatePassword and save(user)
activate UserRepository

UserRepository --> AuthController: User Saved with updated password
deactivate UserRepository


AuthController -> ReactApplication: Display success message
deactivate AuthController

ReactApplication --> User: Redirect to home/dashboard
deactivate ReactApplication
deactivate ResetPasswordPage

@enduml
