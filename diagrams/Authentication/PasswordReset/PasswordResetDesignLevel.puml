@startuml

actor User

participant ReactApplication as "<<View>>\nReactApplication"
participant ForgotPasswordPage as "<<View>>\nForgotPasswordPage"
participant AuthController as "<<Service>>\nAuthController"
participant UserService as "<<Backend>>\nUserService"
participant Mailer as "<<Service>>\nMailer"
participant Database as "<<Database>>\nDatabase"
participant JwtUtils as "<<Utils>>\nJwtUtils"

User -> ReactApplication: Accesses forgot password page
activate ReactApplication

ReactApplication -> ForgotPasswordPage: render()
activate ForgotPasswordPage

User -> ForgotPasswordPage: Provides registered email
ForgotPasswordPage -> AuthController: initiatePasswordReset(email)
activate AuthController

AuthController -> UserService: getUserByEmail(email)
activate UserService

UserService -> Database: Query user by email
activate Database

Database --> UserService: User details
deactivate Database

UserService --> AuthController: User found
deactivate UserService

AuthController -> JwtUtils: generateResetToken(userId, email)
activate JwtUtils

JwtUtils --> AuthController: Token generated
deactivate JwtUtils

AuthController -> UserService: saveResetToken(userId, resetToken)
activate UserService

UserService --> AuthController: Reset token saved
deactivate UserService

AuthController -> Mailer: sendPasswordResetEmail(email, resetToken)
activate Mailer

Mailer --> AuthController: Email sent successfully
deactivate Mailer

AuthController --> ReactApplication: Display success message
deactivate AuthController

ReactApplication --> User: Show confirmation and instructions
deactivate ReactApplication
deactivate ForgotPasswordPage

User -> ReactApplication: Follows the password reset link in the email
activate ReactApplication

ReactApplication -> ResetPasswordPage: render()
activate ResetPasswordPage

User -> ResetPasswordPage: Enters new password
ResetPasswordPage -> AuthController: updatePassword(userId, newPassword)
activate AuthController

AuthController -> UserService: getUserById(userId)
activate UserService

UserService -> Database: Query user by ID
activate Database

Database --> UserService: User details
deactivate Database

UserService --> AuthController: User found
deactivate UserService

AuthController -> UserService: updatePassword(user, newPassword)
activate UserService

UserService --> AuthController: Password updated successfully
deactivate UserService

AuthController -> JwtUtils: generateToken(userId, user.username)
activate JwtUtils

JwtUtils --> AuthController: Token generated
deactivate JwtUtils

AuthController -> ReactApplication: sendJWTResponse(token)
deactivate AuthController

ReactApplication --> User: Redirect to home/dashboard with JWT token
deactivate ReactApplication
deactivate ResetPasswordPage

@enduml
