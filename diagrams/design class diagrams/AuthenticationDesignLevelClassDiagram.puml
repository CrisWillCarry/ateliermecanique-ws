@startuml
skinparam class {
    BackgroundColor<<entity>> Wheat
    BackgroundColor<<controller>> LightSkyBlue
    BackgroundColor<<service>> LightGreen
    BackgroundColor<<repository>> LightCoral
    BackgroundColor<<mapper>> Khaki
    BackgroundColor<<interface>> LightSkyBlue
    BackgroundColor<<utils>> LightGray
}

' AuthController for handling authentication endpoints
class "<<controller>>\nAuthController" as authController {
    + logout(token: String) : ResponseEntity<String>
    + googleLogin(JWT: String) : ResponseEntity<?>
    + facebookToken(token: String) : ResponseEntity<?>
    + authenticateUser(loginRequest: LoginRequest) : ResponseEntity<JWTResponse>
    + registerUser(signupRequest: SignupRequest) : ResponseEntity<MessageResponse>
    + resetPassword (password : ResetPasswordRequest) : ResponseEntity<String>
    + resetPasswordRequest (email : ResetPasswordEmailRequest) : ResponseEntity<String>
    - generateResponse(user: User) : ResponseEntity<?>
}


' UserRepository interface for managing user data
interface "<<repository>>\nUserRepository" as userRepository {
    + findByUsername(username: String) : User
    + save(user: User) : User
    + deleteByUsername(username: String) : void
    + findByEmail(email: String) : Optional<User>
    + findAllByRoles_Name(roleName: String) : List<User>
    + findUserByUserIdentifier_UserId(userId: String) : User
    + existsByEmail(email: String) : Boolean
}

' RoleRepository interface for managing roles
interface "<<repository>>\nRoleRepository" as roleRepository {
    + findByName(name: ERole) : Optional<Role>
}

' OAuth service interface
interface "<<service>>\noAuthService" as oAuthService {
    + googleLogin(JWT: String): User
    + facebookLogin(token: String): User
}

' TokenService interface for OAuth
interface "<<service>>\nTokenService" as tokenServiceOAuth {
    + verifyGoogleToken(jwtToken: String): String
    + verifyFacebookToken(accessToken: String): String
    + verifyInstagramToken(accessToken: String): String
}

' ERole enum for roles
enum "<<entity>>\nERole" as ERole {
    ROLE_CUSTOMER
    ROLE_ADMIN
}

' Role class
class "<<entity>>\nRole" as roleClass {
    - id: int
    - name: ERole
}

' User class with modifications
class "<<entity>>\nUser" as userModified {
    - id: Integer
    - userIdentifier: UserIdentifier
    - firstName: String
    - lastName: String
    - phoneNumber: String
    - email: String
    - picture: String
    - password: String
    - roles: Set<Role>
}

' UserIdentifier embedded class
class "<<entity>>\nUserIdentifier" as userIdentifier {
    - userId: String
}



' JwtUtils class
class "<<utils>>\nJwtUtils" as jwtUtils {
    + generateJwtToken(authentication: Authentication): String
    + generateJwtResponseForOAuth(email: String): String
    + getEmailFromJwtToken(token: String): String
    + validateJwtToken(authToken: String): boolean
    + generateResetToken(userId: String, email: String) : String
}

' Relationships
authController -- userModified : uses
authController -- userRepository : uses
authController -- oAuthService: uses
oAuthService -- tokenServiceOAuth: uses
authController -- jwtUtils: uses
authController -- roleRepository: uses
userModified -- userIdentifier: contains
userModified -- roleClass: contains
userModified -- ERole: contains

@enduml
