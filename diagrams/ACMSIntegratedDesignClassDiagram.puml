@startuml
' Define styles for the containers
skinparam class {
    BackgroundColor<<entity>> Wheat
    BackgroundColor<<controller>> LightSkyBlue
    BackgroundColor<<service>> LightGreen
    BackgroundColor<<repository>> LightCoral
    BackgroundColor<<mapper>> Khaki
}

' Customer Container
package "Customer Components" <<customer>> {
    ' CustomerAccountController
    class "<<controller>>\nCustomerAccountController" as customerController {
        + getAllCustomerAccounts() : ResponseEntity<List<CustomerAccountResponseModel>>
        + getCustomerAccountByCustomerId(String customerId) : ResponseEntity<CustomerAccountResponseModel>
        + updateCustomerAccountByCustomerId(String customerId, CustomerAccountRequestModel customerAccountRequestModel) : ResponseEntity<CustomerAccountResponseModel>
        + deleteCustomerAccountByCustomerId(String customerId) : ResponseEntity<Void>
    }

    ' CustomerAccountService interface
    interface "<<service>>\nCustomerAccountService" as customerService {
        + getAllCustomerAccounts() : List<CustomerAccountResponseModel>
        + getCustomerAccountByCustomerId(String customerId) : CustomerAccountResponseModel
        + updateCustomerAccountByCustomerId(String customerId, CustomerAccountRequestModel customerAccountRequestModel) : CustomerAccountResponseModel
        + deleteCustomerAccountByCustomerId(String customerId) : void
    }

    ' CustomerAccountServiceImpl class
    class "<<service>>\nCustomerAccountServiceImpl" as customerServiceImpl {
        - customerAccountRepository : CustomerAccountRepository
        - customerAccountResponseMapper : CustomerAccountResponseMapper
        - customerAccountRequestMapper : CustomerAccountRequestMapper
        + getAllCustomerAccounts() : List<CustomerAccountResponseModel>
        + getCustomerAccountByCustomerId(String customerId) : CustomerAccountResponseModel
        + updateCustomerAccountByCustomerId(String customerId, CustomerAccountRequestModel customerAccountRequestModel) : CustomerAccountResponseModel
        + deleteCustomerAccountByCustomerId(String customerId) : void
    }

    ' CustomerAccountRepository interface
    interface "<<repository>>\nCustomerAccountRepository" as customerRepository {
        + findAll() : List<CustomerAccount>
        + findCustomerAccountByCustomerAccountIdentifier_CustomerId(String customerId) : CustomerAccount
        + save(CustomerAccount customerAccount) : CustomerAccount
        + delete(CustomerAccount customerAccount) : void
    }

    ' CustomerAccountResponseMapper class
    class "<<mapper>>\nCustomerAccountResponseMapper" as customerResponseMapper {
        + entityToResponseModelList(List<CustomerAccount> customerAccounts) : List<CustomerAccountResponseModel>
        + entityToResponseModel(CustomerAccount customerAccount) : CustomerAccountResponseModel
    }

    ' CustomerAccountRequestMapper class
    class "<<mapper>>\nCustomerAccountRequestMapper" as customerRequestMapper {
        + requestModelToEntity(CustomerAccountRequestModel customerAccountRequestModel) : CustomerAccount
    }

    ' CustomerAccount class
    class "<<entity>>\nCustomerAccount" as customerAccount {
        - id : String
        - firstName : String
        - lastName : String
        - email : String
        - phoneNumber : String
    }

    ' CustomerAccountIdentifier class
    class "<<entity>>\nCustomerAccountIdentifier" as customerIdentifier {
        - customerId : String
        + getCustomerId() : String
    }
}

' Vehicle Container
package "Vehicle Components" <<vehicle>> {
    ' VehicleController
    class "<<controller>>\nVehicleController" as vehicleController {
        - VehicleService : vehicleService
        + getAllVehiclesByCustomerId(String customerId) : ResponseEntity<List<VehicleResponseModel>>
        + getVehicleByVehicleId(String customerId, String vehicleId) : ResponseEntity<VehicleResponseModel>
        + addVehicleToCustomerAccount(String customerId, VehicleRequestModel vehicleRequestModel) : ResponseEntity<VehicleResponseModel>
        + updateVehicleByVehicleId(VehicleRequestModel vehicleRequestModel, String customerId, String vehicleId) : ResponseEntity<VehicleResponseModel>
        + deleteVehicleByVehicleId(String customerId, String vehicleId) : ResponseEntity<Void>
    }

    ' VehicleService interface
    interface "VehicleService" as vehicleService {
        + getAllVehiclesByCustomerId(String customerId) : List<VehicleResponseModel>
        + getVehicleByVehicleId(String customerId, String vehicleId) : VehicleResponseModel
        + addVehicleToCustomerAccount(String customerId, VehicleRequestModel vehicleRequestModel) : VehicleResponseModel
        + updateVehicleByVehicleId(VehicleRequestModel vehicleRequestModel, String customerId, String vehicleId) : VehicleResponseModel
        + deleteVehicleByVehicleId(String customerId, String vehicleId) : void
    }

    ' VehicleServiceImpl class
    class "<<service>>\nVehicleServiceImpl" as vehicleServiceImpl {
        - vehicleRepository : VehicleRepository
        - vehicleResponseMapper : VehicleResponseMapper
        - vehicleRequestMapper : VehicleRequestMapper
        + getAllVehiclesByCustomerId(String customerId) : List<VehicleResponseModel>
        + getVehicleByVehicleId(String customerId, String vehicleId) : VehicleResponseModel
        + addVehicleToCustomerAccount(String customerId, VehicleRequestModel vehicleRequestModel) : VehicleResponseModel
        + updateVehicleByVehicleId(VehicleRequestModel vehicleRequestModel, String customerId, String vehicleId) : VehicleResponseModel
        + deleteVehicleByVehicleId(String customerId, String vehicleId) : void
    }

    ' VehicleRepository interface
    interface "<<repository>>\nVehicleRepository" as vehicleRepository {
        + findAllVehiclesByCustomerId(String customerId) : List<Vehicle>
        + findVehicleByCustomerIdAndVehicleIdentifier_VehicleId(String customerId, String vehicleId) : Vehicle
        + save(Vehicle vehicle) : Vehicle
        + delete(Vehicle vehicle) : void
    }

    ' VehicleResponseMapper class
    class "<<mapper>>\nVehicleResponseMapper" as vehicleResponseMapper {
        + entityToResponseModel(Vehicle vehicle) : VehicleResponseModel
        + entityToResponseModelList(List<Vehicle> vehicles) : List<VehicleResponseModel>
    }

    ' VehicleRequestMapper class
    class "<<mapper>>\nVehicleRequestMapper" as vehicleRequestMapper {
        + requestToEntity(VehicleRequestModel requestModel) : Vehicle
    }

    ' Vehicle class
    class "<<entity>>\nVehicle" as vehicle {
        - id : String
        - vehicleIdentifier : VehicleIdentifier
        - customerId : String
        - make : String
        - model : String
        - year : Integer
        - transmissionType : TransmissionType
        - mileage : Integer
    }

    ' VehicleIdentifier class
    class "VehicleIdentifier" as vehicleIdentifier {
        - vehicleId : String
        + getVehicleId() : String
    }

    ' TransmissionType enum
    enum "TransmissionType" as transmissionType {
      MANUAL
      AUTOMATIC
    }
}


' Relationships within Customer Components
customerController .up.|> customerService : implements
customerServiceImpl .up.|> customerService : implements
customerServiceImpl --> customerRepository : uses
customerServiceImpl --> customerResponseMapper : uses
customerServiceImpl --> customerRequestMapper : uses
customerServiceImpl --> vehicleServiceImpl : uses
customerAccount --> customerIdentifier : contains

' Relationships within Vehicle Components
vehicleController --> vehicleService : uses
vehicleServiceImpl --> vehicleRepository : uses
vehicleServiceImpl --> vehicleResponseMapper : uses
vehicleServiceImpl --> vehicleRequestMapper : uses
vehicle --> vehicleIdentifier : contains
vehicle --> transmissionType : uses


@enduml
